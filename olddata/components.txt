 Eigene Komponenten in Join360 einbauen

======================================================
1. index.html
------------------------------------------------------
Die index.html ist sehr einfach gehalten. Sie enthält nur den Root-Container (#app).
Alle anderen Bereiche (Header, Sidebar, Main) werden von main.js dynamisch eingefügt.

<!DOCTYPE html>
<html lang="de">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Join App</title>
    <link rel="stylesheet" href="css/root.css" />
    <link rel="stylesheet" href="css/main.css" />
    <link rel="stylesheet" href="css/style.css" />
  </head>
  <body>
    <div id="app" class="app-root" data-app-version="0.1.0"></div>
    <script type="module" src="./script/main.js"></script>
  </body>
</html>

Hinweis: #app ist der Einstiegspunkt. main.js fügt später das Grundgerüst ein.

======================================================
2. Layout in main.js
------------------------------------------------------
main.js erstellt nach dem Login automatisch dieses Grundgerüst im #app:

<div class="layout">
  <div id="layout-header"></div>
  <aside id="layout-sidebar"></aside>
  <main id="layout-main" class="main__container" tabindex="-1"></main>
</div>

- #layout-header: hier wird der Header eingefügt
- #layout-sidebar: hier wird die Sidebar eingefügt
- #layout-main: hier wird die aktuelle Ansicht angezeigt (Summary, Board, usw.)

======================================================
3. Neue Komponente anlegen
------------------------------------------------------
Jede Ansicht bekommt eine eigene Datei im Ordner components.

Beispiel: components/board.js

export function renderBoardView(container) {
  let mount = container || document.getElementById("layout-main");
  if (!mount) return;

  mount.innerHTML = `
    <div class="board-layout-wrapper">
      <h2>Board</h2>
      <div class="board-columns">
        <div class="board-column" data-status="todo">
          <h3>To do</h3>
          <div class="task-list" id="board-todo"></div>
        </div>
        <div class="board-column" data-status="in-progress">
          <h3>In Progress</h3>
          <div class="task-list" id="board-inProgress"></div>
        </div>
        <div class="board-column" data-status="awaiting-feedback">
          <h3>Awaiting Feedback</h3>
          <div class="task-list" id="board-awaitingFeedback"></div>
        </div>
        <div class="board-column" data-status="done">
          <h3>Done</h3>
          <div class="task-list" id="board-done"></div>
        </div>
      </div>
    </div>
  `;
}

======================================================
4. main.js anpassen für Routing
------------------------------------------------------
Damit auf Klicks in der Sidebar auch wirklich die richtige Ansicht angezeigt wird,
brauchen wir eine Routing-Funktion.

In main.js ergänzen wir:

import { renderBoardView } from "./components/board.js";

function renderViewFromHash() {
  const hash = window.location.hash || "#summary";
  setActiveNav(hash);

  switch (hash) {
    case "#board":
      renderBoardView();
      break;
    case "#summary":
    default:
      renderSummaryView();
      break;
  }
}

In mountShell() aufrufen:
renderViewFromHash(); // statt immer nur renderSummaryView()

Auch in updateUIFromAuth():
renderViewFromHash(); // statt renderSummaryView()

Und den Hashchange-Listener ergänzen:
window.addEventListener("hashchange", () => {
  renderViewFromHash();
});

======================================================
5. Sidebar anpassen
------------------------------------------------------
In der Sidebar (components/sidebar.js) müssen die Links auf Hashes zeigen:

export function renderSidebar() {
  return `
    <nav>
      <ul>
        <li><a href="#summary">Summary</a></li>
        <li><a href="#board">Board</a></li>
      </ul>
    </nav>
  `;
}

Wenn man auf Board klickt, ändert sich der Hash in der URL zu #board.
main.js erkennt das automatisch und lädt renderBoardView().

======================================================
6. Regeln für alle 
------------------------------------------------------
- Jede Komponente liegt in /components/ und hat eine eigene Datei.
- Jede Komponente exportiert eine Render-Funktion (z. B. renderBoardView).
- Diese Render-Funktion schreibt den HTML-Inhalt in #layout-main.
- In sidebar.js müssen die Links auf #summary, #board usw. zeigen.
- main.js steuert das Routing und zeigt die richtige Komponente an.

======================================================
Fazit
------------------------------------------------------
- index.html bleibt minimal (nur #app + Script).
- main.js kümmert sich um Layout und Routing.
- Sidebar-Links steuern über Hashes die Ansicht.
- Neue Views = neue JS-Datei in components/ + Link in sidebar.js + Case im Routing.

Damit ist der Ablauf für alle Kollegen einfach und einheitlich.



