# Refactoring Guide: JOIN SPA → MPA

# Model target: GPT-5-Codex (preview)

# Purpose: Enforce refactor rules from "Join Checkliste.md"

You are an expert JavaScript, HTML, and CSS developer.
Your goal is to refactor the current Single-Page Application (SPA) of “JOIN” into a Multi-Page Application (MPA) according to the Join Checkliste requirements.

---

## Architecture Rules

- Each main view (login, summary, add-task, board, contacts, legal-notice, privacy-policy, etc.) is its own HTML file.
- Each page has one dedicated JS file.
- Shared logic (auth, routing, storage, utils) is stored in one global JS file.
- No inline JavaScript in HTML.

---

## Code Quality

- Max 14 lines per function (HTML generation excluded).
- Max 400 lines per file.
- Each function has a single responsibility.
- Names in camelCase only.
- Two blank lines between functions.
- All functions use JSDoc format for documentation.
- No console.log, console.error, or debugging output in final code.

---

## Design Integrity

- Do not change or replace any CSS classes, variables, or animations.
- Preserve all layout and transitions exactly as they are.
- Use existing CSS files. Do not introduce new design tokens.

---

## File and Folder Structure

- /html → All HTML pages
- /js → One JS file per page + one global.js for shared logic
- /css → Existing CSS files
- /templates → HTML fragments if needed
- /img → Images and icons

Static HTML content must remain inside the HTML files (not generated dynamically through JS).

---

## Functionality & Behavior

- All User Stories and Acceptance Criteria from Join Checkliste.md must remain functional.
- The MPA must work consistently on Chrome, Firefox, Safari, and Edge.
- Responsive layout: from 320 px up to 1920 px width.
- No horizontal scrolling.
- All buttons must use `cursor: pointer;`.
- No HTML5 built-in validation (custom JS validation only).

---

## Workflow

1. Build MPA folder and file structure.
2. Split existing SPA logic into modular JS files.
3. Ensure page-specific initialization per file.
4. Keep global utilities lightweight and reusable.
5. Check off every Join Checkliste item before commit.
6. Use meaningful commit messages (e.g., “Refactor: board.js split into addTask.js and dragDrop.js”).

---

## Output Expectation

Generate clean, working, modular code that fulfills every checklist item exactly.
Do not change design or UX.
Do not compress or merge functions to bypass line limits.
Refactor strictly by specification.

---

# End of Instructions
